name: "Release - Build and Deploy"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release, format: "v1.0.0"'
        required: true
        default: 'v0.0.0'
        type: string

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v4

      # Lint Dockerfile
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: src/Dockerfile


  DeployStaging:
    name: "Deploy to Staging"
    needs: Lint
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: "https://staging.hr.hoebergen.net"
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            staging
            ${{ github.sha }}
          labels: |
            source: ${{ github.sha }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy on Staging infrastructure
        run: |
          echo "Deploying to staging environment"
          echo "Deployed to ${{ job.environment.url }}"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy docker compose and env files to staging server
        run: |
          ssh -o StrictHostKeyChecking=no jordy@10.0.20.15 "mkdir -p /home/jordy/docker/hr-applicatie-staging"
          scp -o StrictHostKeyChecking=no ./docker-compose.yml jordy@10.0.20.15:/home/jordy/docker/hr-applicatie-staging/docker-compose.yml
          scp -o StrictHostKeyChecking=no ./staging.env jordy@10.0.20.15:/home/jordy/docker/hr-applicatie-staging/.env

      - name: Pull latest Docker image on staging server
        run: |
          ssh -o StrictHostKeyChecking=no jordy@10.0.20.15 "docker compose -f /home/jordy/docker/hr-applicatie-staging/docker-compose.yml pull api && docker compose -f /home/jordy/docker/hr-applicatie-staging/docker-compose.yml up -d --force-recreate --remove-orphans"

  DeployProduction:
    name: "Deploy to Production"
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: "https://hr.hoebergen.net"
    needs: DeployStaging
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest

    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Create a new tag
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: 'chore: version ${{ inputs.VERSION }}'
          tag: ${{ inputs.VERSION }}
          push: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ inputs.VERSION }}
            ${{ github.sha }}
          labels: |
            source: ${{ github.sha }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ inputs.VERSION }}
          generate_release_notes: true
          files: |
            docker-compose.yml
            production.env
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Deploy on Production infrastructure
        run: |
          echo "Deploying to production environment"
          echo "Deployed to ${{ job.environment.url }}"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy docker compose and env files to production server
        run: |
          ssh -o StrictHostKeyChecking=no jordy@10.0.20.15 "mkdir -p /home/jordy/docker/hr-applicatie"
          scp -o StrictHostKeyChecking=no ./docker-compose.yml jordy@10.0.20.15:/home/jordy/docker/hr-applicatie/docker-compose.yml
          scp -o StrictHostKeyChecking=no ./production.env jordy@10.0.20.15:/home/jordy/docker/hr-applicatie/.env

      - name: Pull latest Docker image on production server
        run: |
          ssh -o StrictHostKeyChecking=no jordy@10.0.20.15 "docker compose -f /home/jordy/docker/hr-applicatie/docker-compose.yml pull api && docker compose -f /home/jordy/docker/hr-applicatie/docker-compose.yml up -d  --force-recreate --remove-orphans"
